/**
 * Plastiq Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreatePaymentIntentRequestPayload from '../model/CreatePaymentIntentRequestPayload';
import CreatePaymentRequest from '../model/CreatePaymentRequest';
import Error from '../model/Error';
import InlineResponse2002 from '../model/InlineResponse2002';
import PatchPaymentIntentRequestPayload from '../model/PatchPaymentIntentRequestPayload';
import Payment from '../model/Payment';
import PaymentIntent from '../model/PaymentIntent';
import PaymentRefund from '../model/PaymentRefund';
import PaymentRefundRequest from '../model/PaymentRefundRequest';

/**
* Payments service.
* @module api/PaymentsApi
* @version 1.0.0
*/
export default class PaymentsApi {

    /**
    * Constructs a new PaymentsApi. 
    * @alias module:api/PaymentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the paymentIntentsIdGet operation.
     * @callback module:api/PaymentsApi~paymentIntentsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaymentIntent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a single Payment Intent
     * @param {String} payerId The Payer ID of the Payment Intent
     * @param {String} id The ID of the Payment Intent
     * @param {module:api/PaymentsApi~paymentIntentsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaymentIntent}
     */
    paymentIntentsIdGet(payerId, id, callback) {
      let postBody = null;
      // verify the required parameter 'payerId' is set
      if (payerId === undefined || payerId === null) {
        throw new Error("Missing the required parameter 'payerId' when calling paymentIntentsIdGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling paymentIntentsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'payerId': payerId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaymentIntent;
      return this.apiClient.callApi(
        '/payment-intents/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentIntentsIdPatch operation.
     * @callback module:api/PaymentsApi~paymentIntentsIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaymentIntent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Payment Intent
     * @param {String} id The ID of the Payment Intent
     * @param {module:model/PatchPaymentIntentRequestPayload} patchPaymentIntentRequestPayload Payment Intent to update
     * @param {module:api/PaymentsApi~paymentIntentsIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaymentIntent}
     */
    paymentIntentsIdPatch(id, patchPaymentIntentRequestPayload, callback) {
      let postBody = patchPaymentIntentRequestPayload;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling paymentIntentsIdPatch");
      }
      // verify the required parameter 'patchPaymentIntentRequestPayload' is set
      if (patchPaymentIntentRequestPayload === undefined || patchPaymentIntentRequestPayload === null) {
        throw new Error("Missing the required parameter 'patchPaymentIntentRequestPayload' when calling paymentIntentsIdPatch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PaymentIntent;
      return this.apiClient.callApi(
        '/payment-intents/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentIntentsPost operation.
     * @callback module:api/PaymentsApi~paymentIntentsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaymentIntent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Payment Intent
     * @param {module:model/CreatePaymentIntentRequestPayload} createPaymentIntentRequestPayload Create a Payment Intent object staging it for execution
     * @param {Object} opts Optional parameters
     * @param {String} opts.traceId A valid UUID (V4) for tracing requests. Will be returned as a header. If not present or invalid, a generated UUID will be returned.
     * @param {String} opts.userAgent A string representing the User Agent. Required only when the request is not coming from the end user's browser.
     * @param {String} opts.endUserDeviceId A unique identifier for the end user's browser. Recommended for compliance when the request is not coming from the end user's browser.
     * @param {String} opts.endUserIp The IP address of the end user. Recommended for compliance when the request is not coming from the end user's browser.
     * @param {module:api/PaymentsApi~paymentIntentsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaymentIntent}
     */
    paymentIntentsPost(createPaymentIntentRequestPayload, opts, callback) {
      opts = opts || {};
      let postBody = createPaymentIntentRequestPayload;
      // verify the required parameter 'createPaymentIntentRequestPayload' is set
      if (createPaymentIntentRequestPayload === undefined || createPaymentIntentRequestPayload === null) {
        throw new Error("Missing the required parameter 'createPaymentIntentRequestPayload' when calling paymentIntentsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Trace-Id': opts['traceId'],
        'User-Agent': opts['userAgent'],
        'End-User-Device-Id': opts['endUserDeviceId'],
        'End-User-Ip': opts['endUserIp']
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PaymentIntent;
      return this.apiClient.callApi(
        '/payment-intents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentsGet operation.
     * @callback module:api/PaymentsApi~paymentsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a paginated list of payments by query parameter(s)
     * @param {String} payerId The associated Payer ID to list payments for
     * @param {Object} opts Optional parameters
     * @param {Number} opts.offset The number of records you wish to skip before selecting records
     * @param {Number} opts.limit Number of items to return
     * @param {module:api/PaymentsApi~paymentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2002}
     */
    paymentsGet(payerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'payerId' is set
      if (payerId === undefined || payerId === null) {
        throw new Error("Missing the required parameter 'payerId' when calling paymentsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'payerId': payerId,
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2002;
      return this.apiClient.callApi(
        '/payments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentsIdGet operation.
     * @callback module:api/PaymentsApi~paymentsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Payment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a single Payment
     * @param {String} payerId The Payer ID associated with the Payment
     * @param {String} id The ID of the Payment
     * @param {module:api/PaymentsApi~paymentsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Payment}
     */
    paymentsIdGet(payerId, id, callback) {
      let postBody = null;
      // verify the required parameter 'payerId' is set
      if (payerId === undefined || payerId === null) {
        throw new Error("Missing the required parameter 'payerId' when calling paymentsIdGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling paymentsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'payerId': payerId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Payment;
      return this.apiClient.callApi(
        '/payments/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentsIdRefundsPost operation.
     * @callback module:api/PaymentsApi~paymentsIdRefundsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaymentRefund} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Refund or cancel an existing Payment
     * @param {String} id The ID of the Payment to refund
     * @param {module:model/PaymentRefundRequest} paymentRefundRequest Payment Refund body
     * @param {Object} opts Optional parameters
     * @param {String} opts.traceId A valid UUID (V4) for tracing requests. Will be returned as a header. If not present or invalid, a generated UUID will be returned.
     * @param {module:api/PaymentsApi~paymentsIdRefundsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaymentRefund}
     */
    paymentsIdRefundsPost(id, paymentRefundRequest, opts, callback) {
      opts = opts || {};
      let postBody = paymentRefundRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling paymentsIdRefundsPost");
      }
      // verify the required parameter 'paymentRefundRequest' is set
      if (paymentRefundRequest === undefined || paymentRefundRequest === null) {
        throw new Error("Missing the required parameter 'paymentRefundRequest' when calling paymentsIdRefundsPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Trace-Id': opts['traceId']
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PaymentRefund;
      return this.apiClient.callApi(
        '/payments/{id}/refunds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentsPost operation.
     * @callback module:api/PaymentsApi~paymentsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Payment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Payment from a Payment Intent
     * @param {module:model/CreatePaymentRequest} createPaymentRequest Payment to create
     * @param {Object} opts Optional parameters
     * @param {String} opts.traceId A valid UUID (V4) for tracing requests. Will be returned as a header. If not present or invalid, a generated UUID will be returned.
     * @param {String} opts.userAgent A string representing the User Agent. Required only when the request is not coming from the end user's browser.
     * @param {String} opts.endUserDeviceId A unique identifier for the end user's browser. Recommended for compliance when the request is not coming from the end user's browser.
     * @param {String} opts.endUserIp The IP address of the end user. Recommended for compliance when the request is not coming from the end user's browser.
     * @param {String} opts.idempotencyKey A valid UUID (V4) for handling duplicate requests. Will return original status code, response body, and set a 'Idempotent-Replay' header on response for a given key if a match exists.
     * @param {module:api/PaymentsApi~paymentsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Payment}
     */
    paymentsPost(createPaymentRequest, opts, callback) {
      opts = opts || {};
      let postBody = createPaymentRequest;
      // verify the required parameter 'createPaymentRequest' is set
      if (createPaymentRequest === undefined || createPaymentRequest === null) {
        throw new Error("Missing the required parameter 'createPaymentRequest' when calling paymentsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Trace-Id': opts['traceId'],
        'User-Agent': opts['userAgent'],
        'End-User-Device-Id': opts['endUserDeviceId'],
        'End-User-Ip': opts['endUserIp'],
        'Idempotency-Key': opts['idempotencyKey']
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Payment;
      return this.apiClient.callApi(
        '/payments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
