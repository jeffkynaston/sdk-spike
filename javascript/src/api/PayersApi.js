/**
 * Plastiq Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreatePayerRequest from '../model/CreatePayerRequest';
import Error from '../model/Error';
import Payer from '../model/Payer';
import UpdatePayerRequest from '../model/UpdatePayerRequest';

/**
* Payers service.
* @module api/PayersApi
* @version 1.0.0
*/
export default class PayersApi {

    /**
    * Constructs a new PayersApi. 
    * @alias module:api/PayersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the payersIdDelete operation.
     * @callback module:api/PayersApi~payersIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Payer
     * @param {String} id The ID of the Payer
     * @param {module:api/PayersApi~payersIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    payersIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling payersIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/payers/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the payersIdGet operation.
     * @callback module:api/PayersApi~payersIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Payer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a Payer
     * @param {String} id The ID of the Payer
     * @param {module:api/PayersApi~payersIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Payer}
     */
    payersIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling payersIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Payer;
      return this.apiClient.callApi(
        '/payers/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the payersIdPatch operation.
     * @callback module:api/PayersApi~payersIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Payer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Payer
     * @param {String} id The ID of the Payer
     * @param {module:model/UpdatePayerRequest} updatePayerRequest Payer to update
     * @param {module:api/PayersApi~payersIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Payer}
     */
    payersIdPatch(id, updatePayerRequest, callback) {
      let postBody = updatePayerRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling payersIdPatch");
      }
      // verify the required parameter 'updatePayerRequest' is set
      if (updatePayerRequest === undefined || updatePayerRequest === null) {
        throw new Error("Missing the required parameter 'updatePayerRequest' when calling payersIdPatch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Payer;
      return this.apiClient.callApi(
        '/payers/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the payersPost operation.
     * @callback module:api/PayersApi~payersPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Payer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Payer
     * @param {module:model/CreatePayerRequest} createPayerRequest Payer to create
     * @param {Object} opts Optional parameters
     * @param {String} opts.traceId A valid UUID (V4) for tracing requests. Will be returned as a header. If not present or invalid, a generated UUID will be returned.
     * @param {String} opts.userAgent A string representing the User Agent. Required only when the request is not coming from the end user's browser.
     * @param {String} opts.endUserDeviceId A unique identifier for the end user's browser. Recommended for compliance when the request is not coming from the end user's browser.
     * @param {String} opts.endUserIp The IP address of the end user. Recommended for compliance when the request is not coming from the end user's browser.
     * @param {module:api/PayersApi~payersPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Payer}
     */
    payersPost(createPayerRequest, opts, callback) {
      opts = opts || {};
      let postBody = createPayerRequest;
      // verify the required parameter 'createPayerRequest' is set
      if (createPayerRequest === undefined || createPayerRequest === null) {
        throw new Error("Missing the required parameter 'createPayerRequest' when calling payersPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Trace-Id': opts['traceId'],
        'User-Agent': opts['userAgent'],
        'End-User-Device-Id': opts['endUserDeviceId'],
        'End-User-Ip': opts['endUserIp']
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Payer;
      return this.apiClient.callApi(
        '/payers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
