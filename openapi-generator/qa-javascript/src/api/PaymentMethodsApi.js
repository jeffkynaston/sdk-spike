/**
 * Plastiq Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreatePaymentMethodRequest from '../model/CreatePaymentMethodRequest';
import Error from '../model/Error';
import InlineResponse2003 from '../model/InlineResponse2003';
import PatchPaymentMethodRequest from '../model/PatchPaymentMethodRequest';
import PaymentMethod from '../model/PaymentMethod';

/**
* PaymentMethods service.
* @module api/PaymentMethodsApi
* @version 1.0.0
*/
export default class PaymentMethodsApi {

    /**
    * Constructs a new PaymentMethodsApi. 
    * @alias module:api/PaymentMethodsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Retrieve a paginated list of Payment Methods by query parameter(s)
     * @param {String} payerId The associated Payer ID to list Payment Methods for
     * @param {Object} opts Optional parameters
     * @param {Number} opts.offset The number of records you wish to skip before selecting records
     * @param {Number} opts.limit Number of items to return
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2003} and HTTP response
     */
    paymentMethodsGetWithHttpInfo(payerId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'payerId' is set
      if (payerId === undefined || payerId === null) {
        throw new Error("Missing the required parameter 'payerId' when calling paymentMethodsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'payerId': payerId,
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2003;
      return this.apiClient.callApi(
        '/payment-methods', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a paginated list of Payment Methods by query parameter(s)
     * @param {String} payerId The associated Payer ID to list Payment Methods for
     * @param {Object} opts Optional parameters
     * @param {Number} opts.offset The number of records you wish to skip before selecting records
     * @param {Number} opts.limit Number of items to return
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2003}
     */
    paymentMethodsGet(payerId, opts) {
      return this.paymentMethodsGetWithHttpInfo(payerId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a Payment Method
     * @param {String} id The ID of the Payment Method
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    paymentMethodsIdDeleteWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling paymentMethodsIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/payment-methods/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a Payment Method
     * @param {String} id The ID of the Payment Method
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    paymentMethodsIdDelete(id) {
      return this.paymentMethodsIdDeleteWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a Payment Method
     * @param {String} payerId The Payer ID associated to the Payment Method
     * @param {String} id The ID of the Payment Method
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PaymentMethod} and HTTP response
     */
    paymentMethodsIdGetWithHttpInfo(payerId, id) {
      let postBody = null;
      // verify the required parameter 'payerId' is set
      if (payerId === undefined || payerId === null) {
        throw new Error("Missing the required parameter 'payerId' when calling paymentMethodsIdGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling paymentMethodsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'payerId': payerId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaymentMethod;
      return this.apiClient.callApi(
        '/payment-methods/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a Payment Method
     * @param {String} payerId The Payer ID associated to the Payment Method
     * @param {String} id The ID of the Payment Method
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PaymentMethod}
     */
    paymentMethodsIdGet(payerId, id) {
      return this.paymentMethodsIdGetWithHttpInfo(payerId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a Payment Method
     * @param {String} id The ID of the Payment Method
     * @param {module:model/PatchPaymentMethodRequest} patchPaymentMethodRequest Payment Method to update
     * @param {Object} opts Optional parameters
     * @param {String} opts.traceId A valid UUID (V4) for tracing requests. Will be returned as a header. If not present or invalid, a generated UUID will be returned.
     * @param {String} opts.userAgent A string representing the User Agent. Required only when the request is not coming from the end user's browser.
     * @param {String} opts.endUserDeviceId A unique identifier for the end user's browser. Recommended for compliance when the request is not coming from the end user's browser.
     * @param {String} opts.endUserIp The IP address of the end user. Recommended for compliance when the request is not coming from the end user's browser.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PaymentMethod} and HTTP response
     */
    paymentMethodsIdPatchWithHttpInfo(id, patchPaymentMethodRequest, opts) {
      opts = opts || {};
      let postBody = patchPaymentMethodRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling paymentMethodsIdPatch");
      }
      // verify the required parameter 'patchPaymentMethodRequest' is set
      if (patchPaymentMethodRequest === undefined || patchPaymentMethodRequest === null) {
        throw new Error("Missing the required parameter 'patchPaymentMethodRequest' when calling paymentMethodsIdPatch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Trace-Id': opts['traceId'],
        'User-Agent': opts['userAgent'],
        'End-User-Device-Id': opts['endUserDeviceId'],
        'End-User-Ip': opts['endUserIp']
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PaymentMethod;
      return this.apiClient.callApi(
        '/payment-methods/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a Payment Method
     * @param {String} id The ID of the Payment Method
     * @param {module:model/PatchPaymentMethodRequest} patchPaymentMethodRequest Payment Method to update
     * @param {Object} opts Optional parameters
     * @param {String} opts.traceId A valid UUID (V4) for tracing requests. Will be returned as a header. If not present or invalid, a generated UUID will be returned.
     * @param {String} opts.userAgent A string representing the User Agent. Required only when the request is not coming from the end user's browser.
     * @param {String} opts.endUserDeviceId A unique identifier for the end user's browser. Recommended for compliance when the request is not coming from the end user's browser.
     * @param {String} opts.endUserIp The IP address of the end user. Recommended for compliance when the request is not coming from the end user's browser.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PaymentMethod}
     */
    paymentMethodsIdPatch(id, patchPaymentMethodRequest, opts) {
      return this.paymentMethodsIdPatchWithHttpInfo(id, patchPaymentMethodRequest, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a Payment Method
     * @param {module:model/CreatePaymentMethodRequest} createPaymentMethodRequest Payment Method to create
     * @param {Object} opts Optional parameters
     * @param {String} opts.traceId A valid UUID (V4) for tracing requests. Will be returned as a header. If not present or invalid, a generated UUID will be returned.
     * @param {String} opts.userAgent A string representing the User Agent. Required only when the request is not coming from the end user's browser.
     * @param {String} opts.endUserDeviceId A unique identifier for the end user's browser. Recommended for compliance when the request is not coming from the end user's browser.
     * @param {String} opts.endUserIp The IP address of the end user. Recommended for compliance when the request is not coming from the end user's browser.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PaymentMethod} and HTTP response
     */
    paymentMethodsPostWithHttpInfo(createPaymentMethodRequest, opts) {
      opts = opts || {};
      let postBody = createPaymentMethodRequest;
      // verify the required parameter 'createPaymentMethodRequest' is set
      if (createPaymentMethodRequest === undefined || createPaymentMethodRequest === null) {
        throw new Error("Missing the required parameter 'createPaymentMethodRequest' when calling paymentMethodsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Trace-Id': opts['traceId'],
        'User-Agent': opts['userAgent'],
        'End-User-Device-Id': opts['endUserDeviceId'],
        'End-User-Ip': opts['endUserIp']
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PaymentMethod;
      return this.apiClient.callApi(
        '/payment-methods', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a Payment Method
     * @param {module:model/CreatePaymentMethodRequest} createPaymentMethodRequest Payment Method to create
     * @param {Object} opts Optional parameters
     * @param {String} opts.traceId A valid UUID (V4) for tracing requests. Will be returned as a header. If not present or invalid, a generated UUID will be returned.
     * @param {String} opts.userAgent A string representing the User Agent. Required only when the request is not coming from the end user's browser.
     * @param {String} opts.endUserDeviceId A unique identifier for the end user's browser. Recommended for compliance when the request is not coming from the end user's browser.
     * @param {String} opts.endUserIp The IP address of the end user. Recommended for compliance when the request is not coming from the end user's browser.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PaymentMethod}
     */
    paymentMethodsPost(createPaymentMethodRequest, opts) {
      return this.paymentMethodsPostWithHttpInfo(createPaymentMethodRequest, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
