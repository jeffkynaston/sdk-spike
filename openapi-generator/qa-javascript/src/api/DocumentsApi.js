/**
 * Plastiq Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateDocumentUploadRequest from '../model/CreateDocumentUploadRequest';
import DocumentUpload from '../model/DocumentUpload';
import Error from '../model/Error';

/**
* Documents service.
* @module api/DocumentsApi
* @version 1.0.0
*/
export default class DocumentsApi {

    /**
    * Constructs a new DocumentsApi. 
    * @alias module:api/DocumentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Upload a document
     * @param {module:model/CreateDocumentUploadRequest} createDocumentUploadRequest Document metadata
     * @param {Object} opts Optional parameters
     * @param {String} opts.traceId A valid UUID (V4) for tracing requests. Will be returned as a header. If not present or invalid, a generated UUID will be returned.
     * @param {String} opts.userAgent A string representing the User Agent. Required only when the request is not coming from the end user's browser.
     * @param {String} opts.endUserDeviceId A unique identifier for the end user's browser. Recommended for compliance when the request is not coming from the end user's browser.
     * @param {String} opts.endUserIp The IP address of the end user. Recommended for compliance when the request is not coming from the end user's browser.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DocumentUpload} and HTTP response
     */
    documentsPostWithHttpInfo(createDocumentUploadRequest, opts) {
      opts = opts || {};
      let postBody = createDocumentUploadRequest;
      // verify the required parameter 'createDocumentUploadRequest' is set
      if (createDocumentUploadRequest === undefined || createDocumentUploadRequest === null) {
        throw new Error("Missing the required parameter 'createDocumentUploadRequest' when calling documentsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Trace-Id': opts['traceId'],
        'User-Agent': opts['userAgent'],
        'End-User-Device-Id': opts['endUserDeviceId'],
        'End-User-Ip': opts['endUserIp']
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DocumentUpload;
      return this.apiClient.callApi(
        '/documents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Upload a document
     * @param {module:model/CreateDocumentUploadRequest} createDocumentUploadRequest Document metadata
     * @param {Object} opts Optional parameters
     * @param {String} opts.traceId A valid UUID (V4) for tracing requests. Will be returned as a header. If not present or invalid, a generated UUID will be returned.
     * @param {String} opts.userAgent A string representing the User Agent. Required only when the request is not coming from the end user's browser.
     * @param {String} opts.endUserDeviceId A unique identifier for the end user's browser. Recommended for compliance when the request is not coming from the end user's browser.
     * @param {String} opts.endUserIp The IP address of the end user. Recommended for compliance when the request is not coming from the end user's browser.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DocumentUpload}
     */
    documentsPost(createDocumentUploadRequest, opts) {
      return this.documentsPostWithHttpInfo(createDocumentUploadRequest, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
