/**
 * Plastiq Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateDocumentUploadRequestOneOf from './CreateDocumentUploadRequestOneOf';
import CreateDocumentUploadRequestOneOf1 from './CreateDocumentUploadRequestOneOf1';
import CreateDocumentUploadRequestOneOf2 from './CreateDocumentUploadRequestOneOf2';
import PayerId from './PayerId';
import PaymentId from './PaymentId';
import PaymentIntentId from './PaymentIntentId';
import RecipientId from './RecipientId';

/**
 * The CreateDocumentUploadRequest model module.
 * @module model/CreateDocumentUploadRequest
 * @version 1.0.0
 */
class CreateDocumentUploadRequest {
    /**
     * Constructs a new <code>CreateDocumentUploadRequest</code>.
     * @alias module:model/CreateDocumentUploadRequest
     * @implements module:model/CreateDocumentUploadRequestOneOf
     * @implements module:model/CreateDocumentUploadRequestOneOf1
     * @implements module:model/CreateDocumentUploadRequestOneOf2
     */
    constructor() { 
        CreateDocumentUploadRequestOneOf.initialize(this);CreateDocumentUploadRequestOneOf1.initialize(this);CreateDocumentUploadRequestOneOf2.initialize(this);
        CreateDocumentUploadRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['payer'] = payer;
        obj['type'] = type;
        obj['fileType'] = fileType;
        obj['filename'] = filename;
    }

    /**
     * Constructs a <code>CreateDocumentUploadRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateDocumentUploadRequest} obj Optional instance to populate.
     * @return {module:model/CreateDocumentUploadRequest} The populated <code>CreateDocumentUploadRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateDocumentUploadRequest();
            CreateDocumentUploadRequestOneOf.constructFromObject(data, obj);
            CreateDocumentUploadRequestOneOf1.constructFromObject(data, obj);
            CreateDocumentUploadRequestOneOf2.constructFromObject(data, obj);

            if (data.hasOwnProperty('payer')) {
                obj['payer'] = PayerId.constructFromObject(data['payer']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('fileType')) {
                obj['fileType'] = ApiClient.convertToType(data['fileType'], 'String');
            }
            if (data.hasOwnProperty('filename')) {
                obj['filename'] = ApiClient.convertToType(data['filename'], 'String');
            }
            if (data.hasOwnProperty('paymentIntent')) {
                obj['paymentIntent'] = PaymentIntentId.constructFromObject(data['paymentIntent']);
            }
            if (data.hasOwnProperty('payment')) {
                obj['payment'] = PaymentId.constructFromObject(data['payment']);
            }
            if (data.hasOwnProperty('recipient')) {
                obj['recipient'] = RecipientId.constructFromObject(data['recipient']);
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/PayerId} payer
 */
CreateDocumentUploadRequest.prototype['payer'] = undefined;

/**
 * @member {module:model/CreateDocumentUploadRequest.TypeEnum} type
 */
CreateDocumentUploadRequest.prototype['type'] = undefined;

/**
 * @member {module:model/CreateDocumentUploadRequest.FileTypeEnum} fileType
 */
CreateDocumentUploadRequest.prototype['fileType'] = undefined;

/**
 * @member {String} filename
 */
CreateDocumentUploadRequest.prototype['filename'] = undefined;

/**
 * @member {module:model/PaymentIntentId} paymentIntent
 */
CreateDocumentUploadRequest.prototype['paymentIntent'] = undefined;

/**
 * @member {module:model/PaymentId} payment
 */
CreateDocumentUploadRequest.prototype['payment'] = undefined;

/**
 * @member {module:model/RecipientId} recipient
 */
CreateDocumentUploadRequest.prototype['recipient'] = undefined;


// Implement CreateDocumentUploadRequestOneOf interface:
/**
 * @member {module:model/PaymentIntentId} paymentIntent
 */
CreateDocumentUploadRequestOneOf.prototype['paymentIntent'] = undefined;
// Implement CreateDocumentUploadRequestOneOf1 interface:
/**
 * @member {module:model/PaymentId} payment
 */
CreateDocumentUploadRequestOneOf1.prototype['payment'] = undefined;
// Implement CreateDocumentUploadRequestOneOf2 interface:
/**
 * @member {module:model/RecipientId} recipient
 */
CreateDocumentUploadRequestOneOf2.prototype['recipient'] = undefined;



/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
CreateDocumentUploadRequest['TypeEnum'] = {

    /**
     * value: "INVOICE"
     * @const
     */
    "INVOICE": "INVOICE"
};


/**
 * Allowed values for the <code>fileType</code> property.
 * @enum {String}
 * @readonly
 */
CreateDocumentUploadRequest['FileTypeEnum'] = {

    /**
     * value: "doc"
     * @const
     */
    "doc": "doc",

    /**
     * value: "docx"
     * @const
     */
    "docx": "docx",

    /**
     * value: "gif"
     * @const
     */
    "gif": "gif",

    /**
     * value: "jpeg"
     * @const
     */
    "jpeg": "jpeg",

    /**
     * value: "jpg"
     * @const
     */
    "jpg": "jpg",

    /**
     * value: "pdf"
     * @const
     */
    "pdf": "pdf",

    /**
     * value: "xls"
     * @const
     */
    "xls": "xls",

    /**
     * value: "xlsx"
     * @const
     */
    "xlsx": "xlsx"
};



export default CreateDocumentUploadRequest;

